---
anchor: code_style_guide
---

# Code စတိုင်လမ်းညွှန် {#code_style_guide_title}

PHP community ကကြီးတယ် နောက် မတူညီဘူး၊ မရေမတွက်နိုင်လောက်တဲ့ libraries တွေ frameworks တွေနောက် components တွေလည်းအများကြီးရှိပါတယ်။ ဒါက PHP developer တွေအတွက်ယျေဘူယျအားဖြင့်ရွေးချယ်စရာတွေအများကြီးပါနောက်ပြီးအဲ့ဒါတွေကို Project တစ်ခုထဲမှာပေါင်းစည်းလိုက်တယ်။ ဒါကအရေးကြီးပါတယ်။ PHP code တွေလိုက်နာရန်အတွက်ယျေဘူယျ code style တစ်ခုရှိမှ အဲ့ဒါက developer တွေကို များစွာသော libraries တွေကိုလွယ်လွယ်ကူကူ mix/match လုပ်ပြီးသူတို့ Project တွေအတွက်အသုံးပြုနိုင်အောင်ဖြစ်ပါတယ်။

The [Framework Interop Group][fig] has proposed and approved a series of style recommendations. Not all of them related
to code-style, but those that do are [PSR-0][psr0], [PSR-1][psr1], [PSR-2][psr2] and [PSR-4][psr4]. These
recommendations are merely a set of rules that some projects like Drupal, Zend, Symfony, CakePHP, phpBB, AWS SDK,
FuelPHP, Lithium, etc are starting to adopt. You can use them for your own projects, or continue to use your own
personal style.


Ideally you should write PHP code that adheres to a known standard. This could be any combination of PSR's, or one
of the coding standards made by PEAR or Zend. This means other developers can easily read and work with your code, and
applications that implement the components can have consistency even when working with lots of third-party code.

* [PSR-0 အကြောင်းဖတ်ရန် ][psr0]
* [PSR-1 အကြောင်းဖတ်ရန် ][psr1]
* [PSR-2 အကြောင်းဖတ်ရန် ][psr2]
* [PSR-4 အကြောင်းဖတ်ရန် ][psr4]
* [PEAR Coding Standards အကြောင်းဖတ်ရန် ][pear-cs]
* [Zend Coding Standards အကြောင်းဖတ်ရန် ][zend-cs]
* [Symfony Coding Standards အကြောင်းဖတ်ရန် ][symfony-cs]

You can use [PHP_CodeSniffer][phpcs] to check code against any one of these recommendations, and plugins for text
editors like [Sublime Text 2][st-cs] to be given real time feedback.

You can fix the code layout automatically by using one of the two possible tools. One is Fabien Potencier's
[PHP Coding Standards Fixer][phpcsfixer] which has a very well tested codebase. It is bigger and slower, but very
stable and used by some huge projects like Magento and Symfony. Another option is [php.tools][phptools], which is made
popular by the [sublime-phpfmt][sublime-phpfmt] editor plugin. While being newer, it makes great improvements in
performance, meaning real-time editor fixing is more fluid.

English is preferred for all symbol names and code infrastructure. Comments may be written in any language easily
readable by all current and future parties who may be working on the codebase.


[fig]: http://www.php-fig.org/
[psr0]: https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md
[psr1]: https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md
[psr2]: https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md
[psr4]: https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md
[pear-cs]: http://pear.php.net/manual/en/standards.php
[zend-cs]: http://framework.zend.com/wiki/display/ZFDEV2/Coding+Standards
[symfony-cs]: http://symfony.com/doc/current/contributing/code/standards.html
[phpcs]: http://pear.php.net/package/PHP_CodeSniffer/
[st-cs]: https://github.com/benmatselby/sublime-phpcs
[phpcsfixer]: http://cs.sensiolabs.org/
[phptools]: https://github.com/dericofilho/php.tools
[sublime-phpfmt]: https://github.com/dericofilho/sublime-phpfmt
